#!/bin/bash

Label='x-usb-pay'
MountName='usbfs'
MountPoint='/mnt/'$MountName
SyncPoint='/mnt/ext/ext/aux'
Key='/etc/secret/usb.key'
Header='/etc/secret/usb.lks'
OffsetMiB=2048

RED='\033[1;36m'
NC='\033[0m'

function ShowAllMounts {
    lsblk -o NAME,FSTYPE,SIZE,FSAVAIL,TYPE,LABEL,MOUNTPOINTS | grep -v loop | grep --color 'usbfs\|$'
    echo -e "${RED}[/dev/mapper]${NC}"
    ls -la /dev/mapper | grep "\->" | awk '{print $9}' | grep --color 'usbfs\|$'
}

function FindPart {
    PayName=$(lsblk -o NAME,LABEL | awk '/'$Label'/{print $1}' | grep -o -P "\w+")
    if [[ $PayName == "" ]]; then
        echo "partition not found"
        exit
    fi
    Partition="/dev/$PayName"
}

function MountPart {
    echo "mount(crypt): $MountPoint"
    sudo mkdir -p $MountPoint
    sudo mount "/dev/mapper/$MountName" $MountPoint
}

function UnmountPart {
    local type='part'
    local mountPoint=$(lsblk -o TYPE,MOUNTPOINT $Partition | awk '/part/{print $2}')
    if [[ $mountPoint == "" ]]; then
        type='crypt'
        mountPoint=$(lsblk -o TYPE,MOUNTPOINT $Partition | awk '/crypt/{print $2}')
    fi
    if [[ $mountPoint != "" ]]; then
        echo "umount($type): $mountPoint"
        sudo umount $mountPoint
    fi
}

function New {
    FindPart
    local luksOffset=$((OffsetMiB*1024*2))
    read -n 1 -p "Attention! Are you sure want to crate new Crypt on $Partition? y/n: " key && echo
    if [[ $key != 'y' ]]; then
        exit
    fi
    UnmountPart
    echo "key: $Key"
    echo "header: $Header"
    sudo dd if=/dev/urandom of=$Key bs=4096 count=1
    sudo chmod u=r,go-rwx $Key
    sudo cryptsetup -q luksFormat --hash=sha512 --key-size=512 --key-file=$Key $Partition --header $Header --offset=$luksOffset --luks2-keyslots-size=262144
    MountCrypt
    sudo mkfs.ext4 -F "/dev/mapper/$MountName"
    sudo sync
    UnmountCrypt
}

function MountCrypt {
    echo "mount(luks): $MountName"
    sudo cryptsetup luksOpen $Partition $MountName --key-file=$Key --header $Header
}

function UnmountCrypt {
    echo "umount(luks): $MountName"
    sudo cryptsetup luksClose $MountName
}

function Mount {
    FindPart
    echo "mount[$PayName]"
    UnmountPart
    MountCrypt
    MountPart
}

function Unmount {
    FindPart
    echo "unmount[$PayName]"
    sudo sync
    UnmountPart
    UnmountCrypt
}

function Sync {
    local src=$1
    local dst=$2
    echo "sync: $src => $dst"
    rsync --verbose --progress --recursive --times --update --delete $src/* $dst
    tree $dst
}

function Pull {
    read -n 1 -p "Pull from USB? y/n: " key && echo
    if [[ $key != 'y' ]]; then
        exit
    fi
    Mount
    Sync "$MountPoint/aux" $SyncPoint
    Unmount
}

function Push {
    read -n 1 -p "Push to USB? y/n: " key && echo
    if [[ $key != 'y' ]]; then
        exit
    fi
    Mount
    Sync $SyncPoint "$MountPoint/aux"
    Unmount
}


if [ "$#" -eq 0 ]
then
    ShowAllMounts
else
    arg=$1
    if [ $arg == "new" ]; then
        New
    elif [ $arg == "mount" ]; then
        Mount
    elif [ $arg == "m" ]; then
        Mount
    elif [ "$1" == "umount" ]; then
        Unmount
    elif [ "$1" == "d" ]; then
        Unmount
    elif [ $arg == "pull" ]; then
        Pull
    elif [ $arg == "push" ]; then
        Push
    else
        echo "unknown command: $arg"
    fi
fi
